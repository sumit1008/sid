C. Even Positions
Monocarp had a regular bracket sequence s of length n (n is even). He even came up with his own way to calculate its cost.
He knows that in a regular bracket sequence (RBS), each opening bracket is paired up with the corresponding closing bracket. So he decided to calculate the cost of RBS as the sum of distances between pairs of corresponding bracket pairs.
For example, let's look at RBS (())(). It has three pairs of brackets:
  - (__)__: the distance between brackets at position 1 and at 4 is 4−1=3;
  - _()___: the distance is 3−2=1;
  - ____(): the distance is 6−5=1.
So the cost of
is
.
Unfortunately, due to data corruption, Monocarp lost all characters on odd positions s1,s3,…,sn−1. Only characters on even positions (s2,s4,…,sn) remain. For example, (())() turned to _(_)_).
Monocarp wants to restore his RBS by placing brackets on the odd positions. But since the restored RBS may not be unique, he wants to choose one with minimum cost. It's too hard to do for Monocarp alone, so can you help him?
Reminder: A regular bracket sequence is a string consisting of only brackets, such that this sequence, when inserted 1-s and +-s, gives a valid mathematical expression. For example, (), (()) or (()())() are RBS, while ), ()( or ())(() are not.
Tags -constructive algorithms
Tags -data structures
Tags -greedy
Tags -*1100
