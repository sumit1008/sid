D1. DFS Checker (Easy Version)
This is the easy version of the problem. In this version, the given tree is a perfect binary tree and the constraints on n𝑛 and q𝑞 are lower. You can make hacks only if both versions of the problem are solved.
You are given a perfect binary tree†† consisting of n𝑛 vertices. The vertices are numbered from 11 to n𝑛, and the root is the vertex 11. You are also given a permutation p1,p2,…,pn𝑝1,𝑝2,…,𝑝𝑛 of [1,2,…,n][1,2,…,𝑛].
You need to answer q𝑞 queries. For each query, you are given two integers x𝑥, y𝑦; you need to swap px𝑝𝑥 and py𝑝𝑦 and determine if p1,p2,…,pn𝑝1,𝑝2,…,𝑝𝑛 is a valid DFS order‡‡ of the given tree.
Please note that the swaps are persistent through queries.
†† A perfect binary tree is a tree with vertex 11 as its root, with size n=2k−1𝑛=2𝑘−1 for a positive integer k𝑘, and where the parent of each vertex i𝑖 (1<i≤n1<𝑖≤𝑛) is ⌊i2⌋⌊𝑖2⌋. Thus, all leaves of this tree are at a distance k−1𝑘−1 from the root.
‡‡ A DFS order is found by calling the following dfs function on the given tree.
Note that the DFS order is not unique.
Tags -brute force
Tags -data structures
Tags -dfs and similar
Tags -graphs
Tags -hashing
Tags -trees
Tags -*1900
