E. Binary Search
Anton got bored during the hike and wanted to solve something. He asked Kirill if he had any new problems, and of course, Kirill had one.
You are given a permutation 𝑝p of size 𝑛n, and a number 𝑥x that needs to be found. A permutation of length 𝑛n is an array consisting of 𝑛n distinct integers from 11 to 𝑛n in arbitrary order. For example, [2,3,1,5,4][2,3,1,5,4] is a permutation, but [1,2,2][1,2,2] is not a permutation (22 appears twice in the array), and [1,3,4][1,3,4] is also not a permutation (𝑛=3n=3 but there is 44 in the array).
You decided that you are a cool programmer, so you will use an advanced algorithm for the search — binary search. However, you forgot that for binary search, the array must be sorted.
You did not give up and decided to apply this algorithm anyway, and in order to get the correct answer, you can perform the following operation no more than 22 times before running the algorithm: choose the indices 𝑖i, 𝑗j (1≤𝑖,𝑗≤𝑛1≤i,j≤n) and swap the elements at positions 𝑖i and 𝑗j.
After that, the binary search is performed. At the beginning of the algorithm, two variables 𝑙=1l=1 and 𝑟=𝑛+1r=n+1 are declared. Then the following loop is executed:
The goal is to rearrange the numbers in the permutation before the algorithm so that after the algorithm is executed, 𝑝𝑙pl is equal to 𝑥x. It can be shown that 22 operations are always sufficient.
Tags -binary search
Tags -constructive algorithms
Tags -greedy
Tags -*1700
